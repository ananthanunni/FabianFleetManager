#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FleetManager.Data.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FleetManager")]
	public partial class CompanyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyUser(CompanyUser instance);
    partial void UpdateCompanyUser(CompanyUser instance);
    partial void DeleteCompanyUser(CompanyUser instance);
    partial void InsertCompanyGroup(CompanyGroup instance);
    partial void UpdateCompanyGroup(CompanyGroup instance);
    partial void DeleteCompanyGroup(CompanyGroup instance);
    partial void InsertCompanyGroupModulePermission(CompanyGroupModulePermission instance);
    partial void UpdateCompanyGroupModulePermission(CompanyGroupModulePermission instance);
    partial void DeleteCompanyGroupModulePermission(CompanyGroupModulePermission instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertCompanyGroupCompanyUser(CompanyGroupCompanyUser instance);
    partial void UpdateCompanyGroupCompanyUser(CompanyGroupCompanyUser instance);
    partial void DeleteCompanyGroupCompanyUser(CompanyGroupCompanyUser instance);
    #endregion
		
		public CompanyDataContext() : 
				base(global::FleetManager.Data.Properties.Settings.Default.FleetManagerConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyUser> CompanyUsers
		{
			get
			{
				return this.GetTable<CompanyUser>();
			}
		}
		
		public System.Data.Linq.Table<CompanyGroup> CompanyGroups
		{
			get
			{
				return this.GetTable<CompanyGroup>();
			}
		}
		
		public System.Data.Linq.Table<CompanyGroupModulePermission> CompanyGroupModulePermissions
		{
			get
			{
				return this.GetTable<CompanyGroupModulePermission>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<CompanyGroupCompanyUser> CompanyGroupCompanyUsers
		{
			get
			{
				return this.GetTable<CompanyGroupCompanyUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _ShortName;
		
		private string _FullName;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private System.Nullable<int> _VAT;
		
		private string _Email;
		
		private string _Person;
		
		private string _Contact;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private EntitySet<CompanyUser> _CompanyUsers;
		
		private EntitySet<CompanyGroup> _CompanyGroups;
		
		private EntitySet<CompanyGroupModulePermission> _CompanyGroupModulePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnVATChanging(System.Nullable<int> value);
    partial void OnVATChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPersonChanging(string value);
    partial void OnPersonChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    #endregion
		
		public Company()
		{
			this._CompanyUsers = new EntitySet<CompanyUser>(new Action<CompanyUser>(this.attach_CompanyUsers), new Action<CompanyUser>(this.detach_CompanyUsers));
			this._CompanyGroups = new EntitySet<CompanyGroup>(new Action<CompanyGroup>(this.attach_CompanyGroups), new Action<CompanyGroup>(this.detach_CompanyGroups));
			this._CompanyGroupModulePermissions = new EntitySet<CompanyGroupModulePermission>(new Action<CompanyGroupModulePermission>(this.attach_CompanyGroupModulePermissions), new Action<CompanyGroupModulePermission>(this.detach_CompanyGroupModulePermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(20)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NVarChar(100)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(100)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="NVarChar(100)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VAT", DbType="Int")]
		public System.Nullable<int> VAT
		{
			get
			{
				return this._VAT;
			}
			set
			{
				if ((this._VAT != value))
				{
					this.OnVATChanging(value);
					this.SendPropertyChanging();
					this._VAT = value;
					this.SendPropertyChanged("VAT");
					this.OnVATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(20)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person", DbType="NVarChar(100)")]
		public string Person
		{
			get
			{
				return this._Person;
			}
			set
			{
				if ((this._Person != value))
				{
					this.OnPersonChanging(value);
					this.SendPropertyChanging();
					this._Person = value;
					this.SendPropertyChanged("Person");
					this.OnPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="NVarChar(100)")]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime2")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime2")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyUser", Storage="_CompanyUsers", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<CompanyUser> CompanyUsers
		{
			get
			{
				return this._CompanyUsers;
			}
			set
			{
				this._CompanyUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyGroup", Storage="_CompanyGroups", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<CompanyGroup> CompanyGroups
		{
			get
			{
				return this._CompanyGroups;
			}
			set
			{
				this._CompanyGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyGroupModulePermission", Storage="_CompanyGroupModulePermissions", ThisKey="Id", OtherKey="CompanyGroup_Id")]
		public EntitySet<CompanyGroupModulePermission> CompanyGroupModulePermissions
		{
			get
			{
				return this._CompanyGroupModulePermissions;
			}
			set
			{
				this._CompanyGroupModulePermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CompanyGroups(CompanyGroup entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyGroups(CompanyGroup entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CompanyGroupModulePermissions(CompanyGroupModulePermission entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyGroupModulePermissions(CompanyGroupModulePermission entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyUser")]
	public partial class CompanyUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _Company_Id;
		
		private long _User_Id;
		
		private System.Nullable<bool> _IsAdmin;
		
		private EntitySet<CompanyGroupCompanyUser> _CompanyGroupCompanyUsers;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompany_IdChanging(long value);
    partial void OnCompany_IdChanged();
    partial void OnUser_IdChanging(long value);
    partial void OnUser_IdChanged();
    partial void OnIsAdminChanging(System.Nullable<bool> value);
    partial void OnIsAdminChanged();
    #endregion
		
		public CompanyUser()
		{
			this._CompanyGroupCompanyUsers = new EntitySet<CompanyGroupCompanyUser>(new Action<CompanyGroupCompanyUser>(this.attach_CompanyGroupCompanyUsers), new Action<CompanyGroupCompanyUser>(this.detach_CompanyGroupCompanyUsers));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="BigInt NOT NULL")]
		public long Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="BigInt NOT NULL")]
		public long User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit")]
		public System.Nullable<bool> IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyUser_CompanyGroupCompanyUser", Storage="_CompanyGroupCompanyUsers", ThisKey="Id", OtherKey="CompanyUser_Id")]
		public EntitySet<CompanyGroupCompanyUser> CompanyGroupCompanyUsers
		{
			get
			{
				return this._CompanyGroupCompanyUsers;
			}
			set
			{
				this._CompanyGroupCompanyUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyUser", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyUsers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyUsers.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyGroupCompanyUsers(CompanyGroupCompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.CompanyUser = this;
		}
		
		private void detach_CompanyGroupCompanyUsers(CompanyGroupCompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.CompanyUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyGroup")]
	public partial class CompanyGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _GroupName;
		
		private string _Description;
		
		private long _Company_Id;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private EntitySet<CompanyGroupCompanyUser> _CompanyGroupCompanyUsers;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCompany_IdChanging(long value);
    partial void OnCompany_IdChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    #endregion
		
		public CompanyGroup()
		{
			this._CompanyGroupCompanyUsers = new EntitySet<CompanyGroupCompanyUser>(new Action<CompanyGroupCompanyUser>(this.attach_CompanyGroupCompanyUsers), new Action<CompanyGroupCompanyUser>(this.detach_CompanyGroupCompanyUsers));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(30)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="BigInt NOT NULL")]
		public long Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime2")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyGroup_CompanyGroupCompanyUser", Storage="_CompanyGroupCompanyUsers", ThisKey="Id", OtherKey="CompanyGroup_Id")]
		public EntitySet<CompanyGroupCompanyUser> CompanyGroupCompanyUsers
		{
			get
			{
				return this._CompanyGroupCompanyUsers;
			}
			set
			{
				this._CompanyGroupCompanyUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyGroup", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyGroups.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyGroups.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyGroupCompanyUsers(CompanyGroupCompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.CompanyGroup = this;
		}
		
		private void detach_CompanyGroupCompanyUsers(CompanyGroupCompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.CompanyGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyGroupModulePermission")]
	public partial class CompanyGroupModulePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CompanyGroup_Id;
		
		private long _Module_Id;
		
		private System.Nullable<bool> _View_Right;
		
		private System.Nullable<bool> _Add_Right;
		
		private System.Nullable<bool> _Edit_Right;
		
		private System.Nullable<bool> _Delete_Right;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompanyGroup_IdChanging(long value);
    partial void OnCompanyGroup_IdChanged();
    partial void OnModule_IdChanging(long value);
    partial void OnModule_IdChanged();
    partial void OnView_RightChanging(System.Nullable<bool> value);
    partial void OnView_RightChanged();
    partial void OnAdd_RightChanging(System.Nullable<bool> value);
    partial void OnAdd_RightChanged();
    partial void OnEdit_RightChanging(System.Nullable<bool> value);
    partial void OnEdit_RightChanged();
    partial void OnDelete_RightChanging(System.Nullable<bool> value);
    partial void OnDelete_RightChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    #endregion
		
		public CompanyGroupModulePermission()
		{
			this._Company = default(EntityRef<Company>);
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyGroup_Id", DbType="BigInt NOT NULL")]
		public long CompanyGroup_Id
		{
			get
			{
				return this._CompanyGroup_Id;
			}
			set
			{
				if ((this._CompanyGroup_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._CompanyGroup_Id = value;
					this.SendPropertyChanged("CompanyGroup_Id");
					this.OnCompanyGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Module_Id", DbType="BigInt NOT NULL")]
		public long Module_Id
		{
			get
			{
				return this._Module_Id;
			}
			set
			{
				if ((this._Module_Id != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModule_IdChanging(value);
					this.SendPropertyChanging();
					this._Module_Id = value;
					this.SendPropertyChanged("Module_Id");
					this.OnModule_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_View_Right", DbType="Bit")]
		public System.Nullable<bool> View_Right
		{
			get
			{
				return this._View_Right;
			}
			set
			{
				if ((this._View_Right != value))
				{
					this.OnView_RightChanging(value);
					this.SendPropertyChanging();
					this._View_Right = value;
					this.SendPropertyChanged("View_Right");
					this.OnView_RightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add_Right", DbType="Bit")]
		public System.Nullable<bool> Add_Right
		{
			get
			{
				return this._Add_Right;
			}
			set
			{
				if ((this._Add_Right != value))
				{
					this.OnAdd_RightChanging(value);
					this.SendPropertyChanging();
					this._Add_Right = value;
					this.SendPropertyChanged("Add_Right");
					this.OnAdd_RightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Edit_Right", DbType="Bit")]
		public System.Nullable<bool> Edit_Right
		{
			get
			{
				return this._Edit_Right;
			}
			set
			{
				if ((this._Edit_Right != value))
				{
					this.OnEdit_RightChanging(value);
					this.SendPropertyChanging();
					this._Edit_Right = value;
					this.SendPropertyChanged("Edit_Right");
					this.OnEdit_RightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delete_Right", DbType="Bit")]
		public System.Nullable<bool> Delete_Right
		{
			get
			{
				return this._Delete_Right;
			}
			set
			{
				if ((this._Delete_Right != value))
				{
					this.OnDelete_RightChanging(value);
					this.SendPropertyChanging();
					this._Delete_Right = value;
					this.SendPropertyChanged("Delete_Right");
					this.OnDelete_RightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime2")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyGroupModulePermission", Storage="_Company", ThisKey="CompanyGroup_Id", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyGroupModulePermissions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyGroupModulePermissions.Add(this);
						this._CompanyGroup_Id = value.Id;
					}
					else
					{
						this._CompanyGroup_Id = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_CompanyGroupModulePermission", Storage="_Module", ThisKey="Module_Id", OtherKey="Id", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.CompanyGroupModulePermissions.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.CompanyGroupModulePermissions.Add(this);
						this._Module_Id = value.Id;
					}
					else
					{
						this._Module_Id = default(long);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Module")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _ModuleName;
		
		private int _Sequence;
		
		private System.DateTime _CreatedOn;
		
		private long _CreatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private System.Nullable<long> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<long> _DeletedBy;
		
		private bool _IsDeleted;
		
		private EntitySet<CompanyGroupModulePermission> _CompanyGroupModulePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnModuleNameChanging(string value);
    partial void OnModuleNameChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(long value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    partial void OnUpdatedByChanging(System.Nullable<long> value);
    partial void OnUpdatedByChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<long> value);
    partial void OnDeletedByChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Module()
		{
			this._CompanyGroupModulePermissions = new EntitySet<CompanyGroupModulePermission>(new Action<CompanyGroupModulePermission>(this.attach_CompanyGroupModulePermissions), new Action<CompanyGroupModulePermission>(this.detach_CompanyGroupModulePermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ModuleName
		{
			get
			{
				return this._ModuleName;
			}
			set
			{
				if ((this._ModuleName != value))
				{
					this.OnModuleNameChanging(value);
					this.SendPropertyChanging();
					this._ModuleName = value;
					this.SendPropertyChanged("ModuleName");
					this.OnModuleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int NOT NULL")]
		public int Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="BigInt NOT NULL")]
		public long CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="BigInt")]
		public System.Nullable<long> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="BigInt")]
		public System.Nullable<long> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_CompanyGroupModulePermission", Storage="_CompanyGroupModulePermissions", ThisKey="Id", OtherKey="Module_Id")]
		public EntitySet<CompanyGroupModulePermission> CompanyGroupModulePermissions
		{
			get
			{
				return this._CompanyGroupModulePermissions;
			}
			set
			{
				this._CompanyGroupModulePermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyGroupModulePermissions(CompanyGroupModulePermission entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_CompanyGroupModulePermissions(CompanyGroupModulePermission entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyGroupCompanyUser")]
	public partial class CompanyGroupCompanyUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CompanyGroup_Id;
		
		private long _CompanyUser_Id;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private EntityRef<CompanyGroup> _CompanyGroup;
		
		private EntityRef<CompanyUser> _CompanyUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompanyGroup_IdChanging(long value);
    partial void OnCompanyGroup_IdChanged();
    partial void OnCompanyUser_IdChanging(long value);
    partial void OnCompanyUser_IdChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    #endregion
		
		public CompanyGroupCompanyUser()
		{
			this._CompanyGroup = default(EntityRef<CompanyGroup>);
			this._CompanyUser = default(EntityRef<CompanyUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyGroup_Id", DbType="BigInt NOT NULL")]
		public long CompanyGroup_Id
		{
			get
			{
				return this._CompanyGroup_Id;
			}
			set
			{
				if ((this._CompanyGroup_Id != value))
				{
					if (this._CompanyGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._CompanyGroup_Id = value;
					this.SendPropertyChanged("CompanyGroup_Id");
					this.OnCompanyGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyUser_Id", DbType="BigInt NOT NULL")]
		public long CompanyUser_Id
		{
			get
			{
				return this._CompanyUser_Id;
			}
			set
			{
				if ((this._CompanyUser_Id != value))
				{
					if (this._CompanyUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyUser_IdChanging(value);
					this.SendPropertyChanging();
					this._CompanyUser_Id = value;
					this.SendPropertyChanged("CompanyUser_Id");
					this.OnCompanyUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime2")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyGroup_CompanyGroupCompanyUser", Storage="_CompanyGroup", ThisKey="CompanyGroup_Id", OtherKey="Id", IsForeignKey=true)]
		public CompanyGroup CompanyGroup
		{
			get
			{
				return this._CompanyGroup.Entity;
			}
			set
			{
				CompanyGroup previousValue = this._CompanyGroup.Entity;
				if (((previousValue != value) 
							|| (this._CompanyGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyGroup.Entity = null;
						previousValue.CompanyGroupCompanyUsers.Remove(this);
					}
					this._CompanyGroup.Entity = value;
					if ((value != null))
					{
						value.CompanyGroupCompanyUsers.Add(this);
						this._CompanyGroup_Id = value.Id;
					}
					else
					{
						this._CompanyGroup_Id = default(long);
					}
					this.SendPropertyChanged("CompanyGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyUser_CompanyGroupCompanyUser", Storage="_CompanyUser", ThisKey="CompanyUser_Id", OtherKey="Id", IsForeignKey=true)]
		public CompanyUser CompanyUser
		{
			get
			{
				return this._CompanyUser.Entity;
			}
			set
			{
				CompanyUser previousValue = this._CompanyUser.Entity;
				if (((previousValue != value) 
							|| (this._CompanyUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyUser.Entity = null;
						previousValue.CompanyGroupCompanyUsers.Remove(this);
					}
					this._CompanyUser.Entity = value;
					if ((value != null))
					{
						value.CompanyGroupCompanyUsers.Add(this);
						this._CompanyUser_Id = value.Id;
					}
					else
					{
						this._CompanyUser_Id = default(long);
					}
					this.SendPropertyChanged("CompanyUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
